1. platform?
플랫폼은 원래 기차나 전철에서 승객들이 타고 내리는 승강장을 말하는데 오늘날에는 다양한 종류의 시스템이나 서비스를 제공하기 위해 공통적이고 반복적으로 사용하는 기반 모듈, 어떤 서비스를 가능하게 하는 일종의 ‘토대’라고 할 수 있다. 
제품•서비스•자산•기술•노하우 등 모든 형태가 가능하다.
IT에서는 "각종 서비스의 기반이 되는 하드웨어나 소프트웨어 환경"을 뜻한다.
휴대폰이나 PC와 같은 하드웨어의 경우 중앙처리장치(CPU) 역할을 하는 프로세서, 그래픽카드 등을 통합한 시스템을 플랫폼이라고 부른다.
인터넷의 경우 NHN과 같은 인터넷 사업체가 구축해 놓은 포털 사이트 "네이버"나 페이스북 같은 웹사이트도 하나의 플랫폼이라고 할 수 있다.


2. Framework?
소프트웨어 어플리케이션이나 솔루션의 개발을 수월하게 하기 위해 소프트웨어의 구체적 기능들에 해당하는 부분의 설계와 구현을 재사용 가능하도록 협업화된 형태로 제공하는 소프트웨어 환경을 말한다.

컴퓨터 프로그래밍에서 프레임워크는 구조적으로 고정된 부분을 재사용할 수 있도록 하고, 응용별 특정 기능을 추가적인 사용자 작성 코드에 의해 선택적으로 구현 가능하도록 하는 포괄적인 추상 구조, 그리고 이를 지원하는 소프트웨어 플랫폼을 말한다. 즉, 소프트웨어의 개발에 필수적이고 표준적인 부분에 해당하는 설계와 구현을 재사용 가능하도록, 일련의 협업화된 형태의 클래스들로 제공하는 반제품 소프트웨어 모듈이라고 볼 수 있다. 소프트웨어 프레임워크는 지원 프로그램, 컴파일러, 코드 라이브러리, 도구 세트, API 등과 같이 프로젝트나 솔루션 개발을 가능하게 하는 여러 가지 서로 다른 컴포넌트들을 포함한다.

프레임워크 기반으로 개발을 수행하는 경우, 기반 구조를 그대로 재사용하고 비즈니스 로직과 관련된 부분을 추가적으로 구현하면 되기 때문에 빠른 어플리케이션 구축이 가능하다. 또한 동일 프레임워크를 사용하는 어플리케이션들은 비슷한 뼈대 구조를 가지기 때문에 관리 및 테스트가 용이하다.
프레임워크는 명확하게 정의된 API를 가지고 코드를 재사용 가능한 형태로 구조화한다는 점에서 라이브러리와 비슷하다. 그러나 라이브러리에서는 호출 측이 전체 프로그램 제어 구조를 지정할 수 없지만, 프레임워크에서는 이러한 제어의 반전(inversion of control)이 가능하다. 또한 라이브러리와 달리 프레임워크는 사용자가 선택적 오버라이딩(overriding, 상속받은 함수를 재정의 하는 것)이나 특정 기능을 수행하는 사용자 코드로 특수화하여 코드를 확장 재사용할 수 있다.

프레임워크는 프로그래머들이 어플리케이션에 세부적인 사항을 제외한 공통 부분들의 개발에 드는 시간을 줄이고 세부 요구사항 구현에 집중할 수 있도록 하는 것을 목표로 한다. 예를 들어, 은행 웹 사이트 구축 시 웹 어플리케이션 프레임워크를 사용한다면, 개발팀은 은행 업무와 관련된 특정 기능 개발에만 주력할 수 있는 것이다. 하지만 프레임워크 내의 API가 복잡하게 얽혀 있어서 프레임워크 사용 시 코드가 비대화 되고, 프레임워크의 초기 학습 시간이 많이 소요된다는 비판도 있다. 또한 프레임워크는 서로 다른 플랫폼 제품이나 특정 공급 업체와 버전에 의존적이 될 위험이 있다. 따라서 초기에 소프트웨어 개발에 필요한 적절한 프레임워크를 선택하고 최대한 변경 및 전환할 위험을 줄이는 것이 필요하다.

사용자 응용 프로그램을 개발하기 위한 프레임워크의 예로써 다음과 같은 것들이 있다.

- 의사 결정 지원 시스템
- 웹 애플리케이션 프레임워크
- 미들웨어
- 금융 모델링 애플리케이션
- 멀티미디어 프레임워크
- 엔터프라이즈 아키텍처(enterprise architecture) 프레임워크


3. Libraries?
한국말로는 도서관. 도서관은 다양한 책들이 모여있어서, 필요한 책이있을때마다 방문해서 꺼내보면 되듯이
코드 라이브러리(코드 도서관)도 다양한 코드(주로 함수)들이 모여져 있다. 필요할때 꺼내서 쓸수있는 함수모음집이 라이브러리이다.
컴퓨터 프로그램에서 자주 사용되는 부분 프로그램들을 모아 놓은 것으로 언제든지 자유롭게 이용할 수 있도록 구성되어 있다.


4. API?
운영체제와 응용프로그램 사이의 통신에 사용되는 언어나 메시지 형식을 말한다.
운영체제나 C, C++, Pascal 등과 같은 언어로 응용 프로그램을 만들 때, 윈도우를 만들고 파일을 여는 것과 같은 처리를 할 수 있도록 1,000여 개 이상의 함수로 구성되어 있다. API는 프로그래머를 위한 운영체제나 프로그램의 인터페이스로서 사용자와 직접 대하게 되는 그래픽 사용자 인터페이스나 명령형 인터페이스와 뚜렷한 차이가 있다.

API는 응용 프로그램이 운영체제나 데이터베이스 관리 시스템과 같은 시스템 프로그램과 통신할 때 사용되는 언어나 메시지 형식을 가지며, API는 프로그램 내에서 실행을 위해 특정 서브루틴에 연결을 제공하는 함수를 호출하는 것으로 구현된다. 그러므로 하나의 API는 함수의 호출에 의해 요청되는 작업을 수행하기 위해 이미 존재하거나 또는 연결되어야 하는 몇 개의 프로그램 모듈이나 루틴을 가진다.

좋은 API는 모든 building block을 제공함으로써 프로그램 개발을 쉽게 해준다. 프로그래머는 그 block을 함께 합치기만 하면 된다. API가 프로그래머를 위해서 만들어지기는 했지만, 사용자 입장에서도 같은 API를 사용한 프로그램은 비슷한 인터페이스를 가지기 때문에 새로운 프로그램의 사용법을 배우기가 쉬워진다.



